name: Create Release on PR Merge
on:
  pull_request:
    types: [closed]  # Triggers when a PR is closed
    branches:
      - main         # Only triggers for PRs merged into the main branch
permissions:
  id-token: write
  contents: write
jobs:
  create_release:
    if: github.event.pull_request.merged == true  # Only run if the PR was merged
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Get the final commit message
      id: get_commit_message
      run: |
            # Extract the commit message from the most recent commit on the main branch
            COMMIT_MESSAGE=$(git log -1 --pretty=%B)
            echo "commit message: $COMMIT_MESSAGE"

    - name: echo commit message
      run: |
        echo "the last commit message in the pr is : $COMMIT_MESSAGE"

    - name: get the pr title
      run: |
        echo "pull request title: ${{github.event.pull_request.title }}"

    - name: Get version from file or PR title (optional)
      id: extract_version
      run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          VERSION=$(echo "$PR_TITLE" | grep -oE 'front.v[0-9]+\.[0-9]+\.[0-9]+')
          if [ -z "$VERSION" ]; then
            echo "No version found in PR title"
            exit 1
          fi
          echo "Extracted version: $VERSION"
          echo "::set-output name=VERSION::$VERSION"
    
    - name: use extracted version
      run: |
        echo "The extracted version is: ${{ steps.extract_version.outputs.VERSION }}"
          

    - name: Create a tag
      run: |
        git config user.name "madhukar-hanumanthappa"
        git config user.email "madhukar.hanumanthappa@nuware.com"
        git tag ${{ env.VERSION }}
        git push origin ${{ env.VERSION }}

    - name: Create GitHub release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.VERSION }}
        release_name: Release ${{ env.VERSION }}
        body: ${{ env.COMMIT_MESSAGE }}  # Use the final commit message as the release notes
        draft: false
        prerelease: false   
